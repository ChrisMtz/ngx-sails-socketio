{"version":3,"file":"sails.io.client.js","sourceRoot":"","sources":["../src/sails.io.client.ts"],"names":[],"mappings":"","sourcesContent":["export declare namespace SailsIOClient {\n\n    interface Headers {\n        [key: string]: string | boolean;\n    }\n\n    namespace JWR {\n\n        interface Response {\n            body: any;\n            error: any;\n            headers: Headers;\n            statusCode: number;\n            toString: () => string;\n            toPOJO: () => object;\n            pipe: () => Error;\n        }\n\n        interface Event {\n            verb: any;\n            id: any;\n            data: object;\n        }\n    }\n\n    interface IO {\n        socket: Socket;\n        sails: SailsSocket;\n    }\n\n    interface Options {\n        url: string;\n        query: string;\n        reconnection: boolean;\n        environment: string;\n        autoConnect?: boolean;\n        useCORSRouteToGetCookie?: boolean;\n        transports?: string[];\n        path?: string;\n        headers?: Headers;\n        timeout?: number;\n        initialConnectionHeaders?: Headers;\n        multiplex?: any;\n        reconnectionAttempts?: number;\n        reconnectionDelay?: number;\n        reconnectionDelayMax?: number;\n        rejectUnauthorized?: boolean;\n        randomizationFactor?: number;\n    }\n\n    interface SailsSocket extends Options {\n        connect: (url, opts) => Socket;\n    }\n\n    interface RequestOptions {\n        url?: string;\n        method?: string;\n        params?: object;\n        headers?: Headers;\n    }\n\n    interface EventCallback {\n        (response): void;\n    }\n\n    interface ResponseCallback {\n        (body: any, JWR: JWR.Response): void;\n    }\n\n    interface Socket {\n        _connect(): void;\n        reconnect(): any;\n        disconnect(): any;\n        isConnected(): boolean;\n        isConnecting(): boolean;\n        mightBeAboutToAutoConnect(): boolean;\n        replay(): Socket;\n        on(eventName, callback: EventCallback): Socket;\n        off(eventName, callback: EventCallback): Socket;\n        removeAllListeners(): Socket;\n        get(url: string, data: any, callback: ResponseCallback): void;\n        post(url: string, data: any, callback: ResponseCallback): void;\n        put(url: string, data: any, callback: ResponseCallback): void;\n        patch(url: string, data: any, callback: ResponseCallback): void;\n        delete(url: string, data: any, callback: ResponseCallback): void;\n        request(options: RequestOptions, callback: ResponseCallback): void;\n    }\n}\n"]}